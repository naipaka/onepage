// Mocks generated by Mockito 5.4.5 from annotations
// in backup/test/utils/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i7;

import 'package:db_client/src/connection/native.dart' as _i9;
import 'package:db_client/src/db_client.dart' as _i2;
import 'package:drift/drift.dart' as _i3;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:package_info_plus/package_info_plus.dart' as _i10;
import 'package:sqlite3/sqlite3.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _Fake$DiariesTable_0 extends _i1.SmartFake implements _i2.$DiariesTable {
  _Fake$DiariesTable_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$DbClientManager_1 extends _i1.SmartFake
    implements _i2.$DbClientManager {
  _Fake$DbClientManager_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGeneratedDatabase_2 extends _i1.SmartFake
    implements _i3.GeneratedDatabase {
  _FakeGeneratedDatabase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDriftDatabaseOptions_3 extends _i1.SmartFake
    implements _i3.DriftDatabaseOptions {
  _FakeDriftDatabaseOptions_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrationStrategy_4 extends _i1.SmartFake
    implements _i3.MigrationStrategy {
  _FakeMigrationStrategy_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryUpdateRules_5 extends _i1.SmartFake
    implements _i3.StreamQueryUpdateRules {
  _FakeStreamQueryUpdateRules_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnection_6 extends _i1.SmartFake
    implements _i3.DatabaseConnection {
  _FakeDatabaseConnection_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryExecutor_7 extends _i1.SmartFake implements _i3.QueryExecutor {
  _FakeQueryExecutor_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryStore_8 extends _i1.SmartFake
    implements _i4.StreamQueryStore {
  _FakeStreamQueryStore_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnectionUser_9 extends _i1.SmartFake
    implements _i3.DatabaseConnectionUser {
  _FakeDatabaseConnectionUser_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDiary_10 extends _i1.SmartFake implements _i2.Diary {
  _FakeDiary_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrator_11 extends _i1.SmartFake implements _i3.Migrator {
  _FakeMigrator_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_12<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInsertStatement_13<T1 extends _i3.Table, D1> extends _i1.SmartFake
    implements _i3.InsertStatement<T1, D1> {
  _FakeInsertStatement_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateStatement_14<T extends _i3.Table, D> extends _i1.SmartFake
    implements _i3.UpdateStatement<T, D> {
  _FakeUpdateStatement_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSimpleSelectStatement_15<T1 extends _i3.HasResultSet, D>
    extends _i1.SmartFake
    implements _i3.SimpleSelectStatement<T1, D> {
  _FakeSimpleSelectStatement_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeJoinedSelectStatement_16<FirstT extends _i3.HasResultSet, FirstD>
    extends _i1.SmartFake
    implements _i3.JoinedSelectStatement<FirstT, FirstD> {
  _FakeJoinedSelectStatement_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseSelectStatement_17<Row> extends _i1.SmartFake
    implements _i3.BaseSelectStatement<Row> {
  _FakeBaseSelectStatement_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteStatement_18<T1 extends _i3.Table, D1> extends _i1.SmartFake
    implements _i3.DeleteStatement<T1, D1> {
  _FakeDeleteStatement_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSelectable_19<T> extends _i1.SmartFake implements _i3.Selectable<T> {
  _FakeSelectable_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGenerationContext_20 extends _i1.SmartFake
    implements _i3.GenerationContext {
  _FakeGenerationContext_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSqlite3_21 extends _i1.SmartFake implements _i6.Sqlite3 {
  _FakeSqlite3_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_22 extends _i1.SmartFake implements _i7.File {
  _FakeFile_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DbClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbClient extends _i1.Mock implements _i2.DbClient {
  @override
  int get schemaVersion =>
      (super.noSuchMethod(
            Invocation.getter(#schemaVersion),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i2.$DiariesTable get diaries =>
      (super.noSuchMethod(
            Invocation.getter(#diaries),
            returnValue: _Fake$DiariesTable_0(
              this,
              Invocation.getter(#diaries),
            ),
            returnValueForMissingStub: _Fake$DiariesTable_0(
              this,
              Invocation.getter(#diaries),
            ),
          )
          as _i2.$DiariesTable);

  @override
  _i2.$DbClientManager get managers =>
      (super.noSuchMethod(
            Invocation.getter(#managers),
            returnValue: _Fake$DbClientManager_1(
              this,
              Invocation.getter(#managers),
            ),
            returnValueForMissingStub: _Fake$DbClientManager_1(
              this,
              Invocation.getter(#managers),
            ),
          )
          as _i2.$DbClientManager);

  @override
  Iterable<_i3.TableInfo<_i3.Table, Object?>> get allTables =>
      (super.noSuchMethod(
            Invocation.getter(#allTables),
            returnValue: <_i3.TableInfo<_i3.Table, Object?>>[],
            returnValueForMissingStub: <_i3.TableInfo<_i3.Table, Object?>>[],
          )
          as Iterable<_i3.TableInfo<_i3.Table, Object?>>);

  @override
  List<_i3.DatabaseSchemaEntity> get allSchemaEntities =>
      (super.noSuchMethod(
            Invocation.getter(#allSchemaEntities),
            returnValue: <_i3.DatabaseSchemaEntity>[],
            returnValueForMissingStub: <_i3.DatabaseSchemaEntity>[],
          )
          as List<_i3.DatabaseSchemaEntity>);

  @override
  _i3.GeneratedDatabase get attachedDatabase =>
      (super.noSuchMethod(
            Invocation.getter(#attachedDatabase),
            returnValue: _FakeGeneratedDatabase_2(
              this,
              Invocation.getter(#attachedDatabase),
            ),
            returnValueForMissingStub: _FakeGeneratedDatabase_2(
              this,
              Invocation.getter(#attachedDatabase),
            ),
          )
          as _i3.GeneratedDatabase);

  @override
  _i3.DriftDatabaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeDriftDatabaseOptions_3(
              this,
              Invocation.getter(#options),
            ),
            returnValueForMissingStub: _FakeDriftDatabaseOptions_3(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i3.DriftDatabaseOptions);

  @override
  _i3.MigrationStrategy get migration =>
      (super.noSuchMethod(
            Invocation.getter(#migration),
            returnValue: _FakeMigrationStrategy_4(
              this,
              Invocation.getter(#migration),
            ),
            returnValueForMissingStub: _FakeMigrationStrategy_4(
              this,
              Invocation.getter(#migration),
            ),
          )
          as _i3.MigrationStrategy);

  @override
  _i3.StreamQueryUpdateRules get streamUpdateRules =>
      (super.noSuchMethod(
            Invocation.getter(#streamUpdateRules),
            returnValue: _FakeStreamQueryUpdateRules_5(
              this,
              Invocation.getter(#streamUpdateRules),
            ),
            returnValueForMissingStub: _FakeStreamQueryUpdateRules_5(
              this,
              Invocation.getter(#streamUpdateRules),
            ),
          )
          as _i3.StreamQueryUpdateRules);

  @override
  _i3.DatabaseConnection get connection =>
      (super.noSuchMethod(
            Invocation.getter(#connection),
            returnValue: _FakeDatabaseConnection_6(
              this,
              Invocation.getter(#connection),
            ),
            returnValueForMissingStub: _FakeDatabaseConnection_6(
              this,
              Invocation.getter(#connection),
            ),
          )
          as _i3.DatabaseConnection);

  @override
  _i3.SqlTypes get typeMapping =>
      (super.noSuchMethod(
            Invocation.getter(#typeMapping),
            returnValue: _i8.dummyValue<_i3.SqlTypes>(
              this,
              Invocation.getter(#typeMapping),
            ),
            returnValueForMissingStub: _i8.dummyValue<_i3.SqlTypes>(
              this,
              Invocation.getter(#typeMapping),
            ),
          )
          as _i3.SqlTypes);

  @override
  _i3.QueryExecutor get executor =>
      (super.noSuchMethod(
            Invocation.getter(#executor),
            returnValue: _FakeQueryExecutor_7(
              this,
              Invocation.getter(#executor),
            ),
            returnValueForMissingStub: _FakeQueryExecutor_7(
              this,
              Invocation.getter(#executor),
            ),
          )
          as _i3.QueryExecutor);

  @override
  _i4.StreamQueryStore get streamQueries =>
      (super.noSuchMethod(
            Invocation.getter(#streamQueries),
            returnValue: _FakeStreamQueryStore_8(
              this,
              Invocation.getter(#streamQueries),
            ),
            returnValueForMissingStub: _FakeStreamQueryStore_8(
              this,
              Invocation.getter(#streamQueries),
            ),
          )
          as _i4.StreamQueryStore);

  @override
  _i3.DatabaseConnectionUser get resolvedEngine =>
      (super.noSuchMethod(
            Invocation.getter(#resolvedEngine),
            returnValue: _FakeDatabaseConnectionUser_9(
              this,
              Invocation.getter(#resolvedEngine),
            ),
            returnValueForMissingStub: _FakeDatabaseConnectionUser_9(
              this,
              Invocation.getter(#resolvedEngine),
            ),
          )
          as _i3.DatabaseConnectionUser);

  @override
  _i5.Future<void> writeBackupToFile({required String? filePath}) =>
      (super.noSuchMethod(
            Invocation.method(#writeBackupToFile, [], {#filePath: filePath}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.Diary> insertDiary({
    required String? content,
    required DateTime? date,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#insertDiary, [], {
              #content: content,
              #date: date,
            }),
            returnValue: _i5.Future<_i2.Diary>.value(
              _FakeDiary_10(
                this,
                Invocation.method(#insertDiary, [], {
                  #content: content,
                  #date: date,
                }),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i2.Diary>.value(
              _FakeDiary_10(
                this,
                Invocation.method(#insertDiary, [], {
                  #content: content,
                  #date: date,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.Diary>);

  @override
  _i5.Future<List<_i2.Diary>> getDiaries({
    required DateTime? from,
    required DateTime? to,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDiaries, [], {#from: from, #to: to}),
            returnValue: _i5.Future<List<_i2.Diary>>.value(<_i2.Diary>[]),
            returnValueForMissingStub: _i5.Future<List<_i2.Diary>>.value(
              <_i2.Diary>[],
            ),
          )
          as _i5.Future<List<_i2.Diary>>);

  @override
  _i5.Future<int> updateDiary({required int? id, required String? content}) =>
      (super.noSuchMethod(
            Invocation.method(#updateDiary, [], {#id: id, #content: content}),
            returnValue: _i5.Future<int>.value(0),
            returnValueForMissingStub: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i3.Migrator createMigrator() =>
      (super.noSuchMethod(
            Invocation.method(#createMigrator, []),
            returnValue: _FakeMigrator_11(
              this,
              Invocation.method(#createMigrator, []),
            ),
            returnValueForMissingStub: _FakeMigrator_11(
              this,
              Invocation.method(#createMigrator, []),
            ),
          )
          as _i3.Migrator);

  @override
  _i5.Future<void> beforeOpen(
    _i3.QueryExecutor? executor,
    _i3.OpeningDetails? details,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#beforeOpen, [executor, details]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<T> createStream<T extends Object>(
    _i4.QueryStreamFetcher<T>? stmt,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createStream, [stmt]),
            returnValue: _i5.Stream<T>.empty(),
            returnValueForMissingStub: _i5.Stream<T>.empty(),
          )
          as _i5.Stream<T>);

  @override
  T alias<T, D>(_i3.ResultSetImplementation<T, D>? table, String? alias) =>
      (super.noSuchMethod(
            Invocation.method(#alias, [table, alias]),
            returnValue: _i8.dummyValue<T>(
              this,
              Invocation.method(#alias, [table, alias]),
            ),
            returnValueForMissingStub: _i8.dummyValue<T>(
              this,
              Invocation.method(#alias, [table, alias]),
            ),
          )
          as T);

  @override
  void markTablesUpdated(Iterable<_i3.TableInfo<_i3.Table, dynamic>>? tables) =>
      super.noSuchMethod(
        Invocation.method(#markTablesUpdated, [tables]),
        returnValueForMissingStub: null,
      );

  @override
  void notifyUpdates(Set<_i3.TableUpdate>? updates) => super.noSuchMethod(
    Invocation.method(#notifyUpdates, [updates]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Stream<Set<_i3.TableUpdate>> tableUpdates([
    _i3.TableUpdateQuery? query = const _i3.TableUpdateQuery.any(),
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#tableUpdates, [query]),
            returnValue: _i5.Stream<Set<_i3.TableUpdate>>.empty(),
            returnValueForMissingStub: _i5.Stream<Set<_i3.TableUpdate>>.empty(),
          )
          as _i5.Stream<Set<_i3.TableUpdate>>);

  @override
  _i5.Future<T> doWhenOpened<T>(
    _i5.FutureOr<T> Function(_i3.QueryExecutor)? fn,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#doWhenOpened, [fn]),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#doWhenOpened, [fn]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(this, Invocation.method(#doWhenOpened, [fn])),
            returnValueForMissingStub:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#doWhenOpened, [fn]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(this, Invocation.method(#doWhenOpened, [fn])),
          )
          as _i5.Future<T>);

  @override
  _i3.InsertStatement<T, D> into<T extends _i3.Table, D>(
    _i3.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#into, [table]),
            returnValue: _FakeInsertStatement_13<T, D>(
              this,
              Invocation.method(#into, [table]),
            ),
            returnValueForMissingStub: _FakeInsertStatement_13<T, D>(
              this,
              Invocation.method(#into, [table]),
            ),
          )
          as _i3.InsertStatement<T, D>);

  @override
  _i3.UpdateStatement<Tbl, R> update<Tbl extends _i3.Table, R>(
    _i3.TableInfo<Tbl, R>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [table]),
            returnValue: _FakeUpdateStatement_14<Tbl, R>(
              this,
              Invocation.method(#update, [table]),
            ),
            returnValueForMissingStub: _FakeUpdateStatement_14<Tbl, R>(
              this,
              Invocation.method(#update, [table]),
            ),
          )
          as _i3.UpdateStatement<Tbl, R>);

  @override
  _i3.SimpleSelectStatement<T, R> select<T extends _i3.HasResultSet, R>(
    _i3.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#select, [table], {#distinct: distinct}),
            returnValue: _FakeSimpleSelectStatement_15<T, R>(
              this,
              Invocation.method(#select, [table], {#distinct: distinct}),
            ),
            returnValueForMissingStub: _FakeSimpleSelectStatement_15<T, R>(
              this,
              Invocation.method(#select, [table], {#distinct: distinct}),
            ),
          )
          as _i3.SimpleSelectStatement<T, R>);

  @override
  _i3.JoinedSelectStatement<T, R> selectOnly<T extends _i3.HasResultSet, R>(
    _i3.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            returnValue: _FakeJoinedSelectStatement_16<T, R>(
              this,
              Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            ),
            returnValueForMissingStub: _FakeJoinedSelectStatement_16<T, R>(
              this,
              Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            ),
          )
          as _i3.JoinedSelectStatement<T, R>);

  @override
  _i3.BaseSelectStatement<_i3.TypedResult> selectExpressions(
    Iterable<_i3.Expression<Object>>? columns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#selectExpressions, [columns]),
            returnValue: _FakeBaseSelectStatement_17<_i3.TypedResult>(
              this,
              Invocation.method(#selectExpressions, [columns]),
            ),
            returnValueForMissingStub:
                _FakeBaseSelectStatement_17<_i3.TypedResult>(
                  this,
                  Invocation.method(#selectExpressions, [columns]),
                ),
          )
          as _i3.BaseSelectStatement<_i3.TypedResult>);

  @override
  _i3.DeleteStatement<T, D> delete<T extends _i3.Table, D>(
    _i3.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [table]),
            returnValue: _FakeDeleteStatement_18<T, D>(
              this,
              Invocation.method(#delete, [table]),
            ),
            returnValueForMissingStub: _FakeDeleteStatement_18<T, D>(
              this,
              Invocation.method(#delete, [table]),
            ),
          )
          as _i3.DeleteStatement<T, D>);

  @override
  _i5.Future<int> customUpdate(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i3.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customUpdate,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i5.Future<int>.value(0),
            returnValueForMissingStub: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> customInsert(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customInsert,
              [query],
              {#variables: variables, #updates: updates},
            ),
            returnValue: _i5.Future<int>.value(0),
            returnValueForMissingStub: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.QueryRow>> customWriteReturning(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i3.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customWriteReturning,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i5.Future<List<_i3.QueryRow>>.value(<_i3.QueryRow>[]),
            returnValueForMissingStub: _i5.Future<List<_i3.QueryRow>>.value(
              <_i3.QueryRow>[],
            ),
          )
          as _i5.Future<List<_i3.QueryRow>>);

  @override
  _i3.Selectable<_i3.QueryRow> customSelect(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelect,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_19<_i3.QueryRow>(
              this,
              Invocation.method(
                #customSelect,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
            returnValueForMissingStub: _FakeSelectable_19<_i3.QueryRow>(
              this,
              Invocation.method(
                #customSelect,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i3.Selectable<_i3.QueryRow>);

  @override
  _i3.Selectable<_i3.QueryRow> customSelectQuery(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelectQuery,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_19<_i3.QueryRow>(
              this,
              Invocation.method(
                #customSelectQuery,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
            returnValueForMissingStub: _FakeSelectable_19<_i3.QueryRow>(
              this,
              Invocation.method(
                #customSelectQuery,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i3.Selectable<_i3.QueryRow>);

  @override
  _i5.Future<void> customStatement(String? statement, [List<dynamic>? args]) =>
      (super.noSuchMethod(
            Invocation.method(#customStatement, [statement, args]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<T> transaction<T>(
    _i5.Future<T> Function()? action, {
    bool? requireNew = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #transaction,
              [action],
              {#requireNew: requireNew},
            ),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #transaction,
                      [action],
                      {#requireNew: requireNew},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(
                  this,
                  Invocation.method(
                    #transaction,
                    [action],
                    {#requireNew: requireNew},
                  ),
                ),
            returnValueForMissingStub:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #transaction,
                      [action],
                      {#requireNew: requireNew},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(
                  this,
                  Invocation.method(
                    #transaction,
                    [action],
                    {#requireNew: requireNew},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<T> exclusively<T>(_i5.Future<T> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#exclusively, [action]),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#exclusively, [action]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(
                  this,
                  Invocation.method(#exclusively, [action]),
                ),
            returnValueForMissingStub:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#exclusively, [action]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(
                  this,
                  Invocation.method(#exclusively, [action]),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<void> batch(_i5.FutureOr<void> Function(_i3.Batch)? runInBatch) =>
      (super.noSuchMethod(
            Invocation.method(#batch, [runInBatch]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<T> runWithInterceptor<T>(
    _i5.Future<T> Function()? action, {
    required _i3.QueryInterceptor? interceptor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runWithInterceptor,
              [action],
              {#interceptor: interceptor},
            ),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runWithInterceptor,
                      [action],
                      {#interceptor: interceptor},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(
                  this,
                  Invocation.method(
                    #runWithInterceptor,
                    [action],
                    {#interceptor: interceptor},
                  ),
                ),
            returnValueForMissingStub:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runWithInterceptor,
                      [action],
                      {#interceptor: interceptor},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(
                  this,
                  Invocation.method(
                    #runWithInterceptor,
                    [action],
                    {#interceptor: interceptor},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i3.GenerationContext $write(
    _i3.Component? component, {
    bool? hasMultipleTables,
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$write,
              [component],
              {#hasMultipleTables: hasMultipleTables, #startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_20(
              this,
              Invocation.method(
                #$write,
                [component],
                {
                  #hasMultipleTables: hasMultipleTables,
                  #startIndex: startIndex,
                },
              ),
            ),
            returnValueForMissingStub: _FakeGenerationContext_20(
              this,
              Invocation.method(
                #$write,
                [component],
                {
                  #hasMultipleTables: hasMultipleTables,
                  #startIndex: startIndex,
                },
              ),
            ),
          )
          as _i3.GenerationContext);

  @override
  _i3.GenerationContext $writeInsertable(
    _i3.TableInfo<_i3.Table, dynamic>? table,
    _i3.Insertable<dynamic>? insertable, {
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$writeInsertable,
              [table, insertable],
              {#startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_20(
              this,
              Invocation.method(
                #$writeInsertable,
                [table, insertable],
                {#startIndex: startIndex},
              ),
            ),
            returnValueForMissingStub: _FakeGenerationContext_20(
              this,
              Invocation.method(
                #$writeInsertable,
                [table, insertable],
                {#startIndex: startIndex},
              ),
            ),
          )
          as _i3.GenerationContext);

  @override
  String $expandVar(int? start, int? amount) =>
      (super.noSuchMethod(
            Invocation.method(#$expandVar, [start, amount]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#$expandVar, [start, amount]),
            ),
            returnValueForMissingStub: _i8.dummyValue<String>(
              this,
              Invocation.method(#$expandVar, [start, amount]),
            ),
          )
          as String);
}

/// A class which mocks [DbConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbConnection extends _i1.Mock implements _i9.DbConnection {
  @override
  _i6.Sqlite3 get sqlite3Instance =>
      (super.noSuchMethod(
            Invocation.getter(#sqlite3Instance),
            returnValue: _FakeSqlite3_21(
              this,
              Invocation.getter(#sqlite3Instance),
            ),
            returnValueForMissingStub: _FakeSqlite3_21(
              this,
              Invocation.getter(#sqlite3Instance),
            ),
          )
          as _i6.Sqlite3);

  @override
  set sqlite3Instance(_i6.Sqlite3? _sqlite3Instance) => super.noSuchMethod(
    Invocation.setter(#sqlite3Instance, _sqlite3Instance),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> ensureDatabaseFileMigration() =>
      (super.noSuchMethod(
            Invocation.method(#ensureDatabaseFileMigration, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i7.File> getDatabaseFile() =>
      (super.noSuchMethod(
            Invocation.method(#getDatabaseFile, []),
            returnValue: _i5.Future<_i7.File>.value(
              _FakeFile_22(this, Invocation.method(#getDatabaseFile, [])),
            ),
            returnValueForMissingStub: _i5.Future<_i7.File>.value(
              _FakeFile_22(this, Invocation.method(#getDatabaseFile, [])),
            ),
          )
          as _i5.Future<_i7.File>);

  @override
  _i5.Future<_i7.File> createValidBackupFile({
    required String? backupFilePath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createValidBackupFile, [], {
              #backupFilePath: backupFilePath,
            }),
            returnValue: _i5.Future<_i7.File>.value(
              _FakeFile_22(
                this,
                Invocation.method(#createValidBackupFile, [], {
                  #backupFilePath: backupFilePath,
                }),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i7.File>.value(
              _FakeFile_22(
                this,
                Invocation.method(#createValidBackupFile, [], {
                  #backupFilePath: backupFilePath,
                }),
              ),
            ),
          )
          as _i5.Future<_i7.File>);

  @override
  _i5.Future<void> restoreBackup({required _i7.File? validBackupFile}) =>
      (super.noSuchMethod(
            Invocation.method(#restoreBackup, [], {
              #validBackupFile: validBackupFile,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [PackageInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfo extends _i1.Mock implements _i10.PackageInfo {
  @override
  String get appName =>
      (super.noSuchMethod(
            Invocation.getter(#appName),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#appName),
            ),
            returnValueForMissingStub: _i8.dummyValue<String>(
              this,
              Invocation.getter(#appName),
            ),
          )
          as String);

  @override
  String get packageName =>
      (super.noSuchMethod(
            Invocation.getter(#packageName),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#packageName),
            ),
            returnValueForMissingStub: _i8.dummyValue<String>(
              this,
              Invocation.getter(#packageName),
            ),
          )
          as String);

  @override
  String get version =>
      (super.noSuchMethod(
            Invocation.getter(#version),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#version),
            ),
            returnValueForMissingStub: _i8.dummyValue<String>(
              this,
              Invocation.getter(#version),
            ),
          )
          as String);

  @override
  String get buildNumber =>
      (super.noSuchMethod(
            Invocation.getter(#buildNumber),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#buildNumber),
            ),
            returnValueForMissingStub: _i8.dummyValue<String>(
              this,
              Invocation.getter(#buildNumber),
            ),
          )
          as String);

  @override
  String get buildSignature =>
      (super.noSuchMethod(
            Invocation.getter(#buildSignature),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#buildSignature),
            ),
            returnValueForMissingStub: _i8.dummyValue<String>(
              this,
              Invocation.getter(#buildSignature),
            ),
          )
          as String);

  @override
  Map<String, dynamic> get data =>
      (super.noSuchMethod(
            Invocation.getter(#data),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
