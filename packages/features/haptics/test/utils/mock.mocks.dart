// Mocks generated by Mockito 5.4.6 from annotations
// in haptics/test/utils/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:prefs_client/src/prefs_client.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PrefsClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrefsClient extends _i1.Mock implements _i2.PrefsClient {
  MockPrefsClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get textInputHapticEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#textInputHapticEnabled),
            returnValue: false,
          )
          as bool);

  @override
  bool get otherHapticEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#otherHapticEnabled),
            returnValue: false,
          )
          as bool);

  @override
  List<Map<String, dynamic>> get notificationSettings =>
      (super.noSuchMethod(
            Invocation.getter(#notificationSettings),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  _i3.Future<bool> setTextInputHapticEnabled({required bool? enabled}) =>
      (super.noSuchMethod(
            Invocation.method(#setTextInputHapticEnabled, [], {
              #enabled: enabled,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> setOtherHapticEnabled({required bool? enabled}) =>
      (super.noSuchMethod(
            Invocation.method(#setOtherHapticEnabled, [], {#enabled: enabled}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> setNotificationSettings(
    List<Map<String, dynamic>>? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setNotificationSettings, [settings]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
